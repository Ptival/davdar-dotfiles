module UnicodeGen where

import Data.List
import Control.Monad

import Control.Exception

import qualified Data.Map as Map

type UnicodeRep = String
type EscapeCode = String
type LatexRep = String
type Description = String

main :: IO ()
main = do
  checkUnique
  writeFile "unicode.el" genEmacsScript
  writeFile "unicode.vim" genVimScript
  writeFile "latex-unicode.sed" genSedScript
  writeFile "latex-unicode-escape.sed" genSedEscapeScript
  writeFile "latex-unicode-unescape.sed" genSedUnescapeScript
  writeFile "latex-unicode-mark.sed" genSedMarkScript
  writeFile "latex-demo.tex" genLatexDemo
  writeFile "unicode-input.txt" genInputReference
  putStrLn "unicode files generated: unicode.el unicode.vim latex-unicode.sed latex-demo.tex unicode-input.txt"

data Code = Code 
  { unicodeRep :: UnicodeRep
  , escapeCode :: EscapeCode 
  , latexRep :: LatexRep 
  , description :: Description
  }

code :: UnicodeRep -> EscapeCode -> Code
code u e = Code u e "" ""

lcode :: UnicodeRep -> EscapeCode -> LatexRep -> Code
lcode u e l = Code u e (l ++ " ") ""

lcodet :: UnicodeRep -> EscapeCode -> LatexRep -> Code
lcodet u e l = Code u e l ""

duplicates :: (Ord a) => [a] -> [a]
duplicates xs = 
  let results = foldl' (\ m x -> Map.insertWith (+) x 1 m) Map.empty xs
  in Map.keys $ Map.filter (\ n -> n > 1) results

checkUnique :: IO ()
checkUnique = do
  let escapes = map escapeCode codes
      dups = duplicates escapes
  when (length dups > 0) $
    throwIO $ AssertionFailed $ "duplicates!\n" ++ show dups


vimEscape :: String -> String
vimEscape = concatMap escapeChar
  where
    escapeChar :: Char -> String
    escapeChar '|' = "\\|"
    escapeChar c = [c]

emacsEscape :: String -> String
emacsEscape = concatMap escapeChar
  where
    escapeChar :: Char -> String
    escapeChar '\\' = "\\\\"
    escapeChar '\"' = "\\\""
    escapeChar c = [c]

sedEscape :: String -> String
sedEscape = concatMap escapeChar
  where
    escapeChar :: Char -> String
    escapeChar '/'  = "\\/"
    escapeChar '.'  = "\\."
    escapeChar '^'  = "\\^"
    escapeChar '$'  = "\\$"
    escapeChar '*'  = "\\*"
    escapeChar '+'  = "\\+"
    escapeChar '?'  = "\\?"
    escapeChar '('  = "\\("
    escapeChar ')'  = "\\)"
    escapeChar '['  = "\\["
    escapeChar ']'  = "\\]"
    escapeChar '{'  = "\\{"
    escapeChar '}'  = "\\}"
    escapeChar '\\' = "\\\\"
    escapeChar '|'  = "\\|"
    escapeChar c    = [c]

latexEscape :: String -> String
latexEscape = concatMap escapeChar
  where
    escapeChar :: Char -> String
    escapeChar '&' = "\\&"
    escapeChar '%' = "\\%"
    escapeChar '$' = "\\$"
    escapeChar '#' = "\\#"
    escapeChar '_' = "\\_"
    escapeChar '{' = "\\{"
    escapeChar '}' = "\\}"
    escapeChar '~' = "\\textasciitilde "
    escapeChar '^' = "\\textasciicircum "
    escapeChar '\\' = "\\textbackslash "
    escapeChar '-' = "{-}"
    escapeChar c = [c]

genVimScript :: String
genVimScript = do
  code <- codes
  command code
  where
    command :: Code -> String
    command (Code u e _ _) = "noremap! " ++ vimEscape ("\\" ++ e) ++ " " ++ vimEscape u ++ "\n"

genEmacsScript :: String
genEmacsScript = concat $ intersperse "\n"
  [ "(quail-define-package"
  , " \"darais\""
  , " \"UTF-32\""
  , " \"DaraisInput\""
  , " t"
  , " \"David Darais's personal input codes\""
  , " nil t nil nil nil nil nil nil nil nil t)"
  , "(quail-define-rules"
  , do
      code <- codes
      command code
    ++ ")"
  ]
  where
    command :: Code -> String
    command (Code u e _ _) = " (\"" ++ emacsEscape ("\\" ++ e) ++ "\" [\"" ++ emacsEscape u ++ "\"])" ++ "\n"

genSedScript :: String
genSedScript = do
  code <- codes
  command code
    where
      command :: Code -> String
      command (Code u e l _) = 
        if l == "" 
           then ""
           else "s/" ++ sedEscape u ++ "/" ++ sedEscape l ++ "/g\n"

quoteL :: String
quoteL = "⧘"
quoteR :: String
quoteR = "⧙"

genSedEscapeScript :: String
genSedEscapeScript = do
  code <- codes
  command code
    where
      command :: Code -> String
      command (Code u e l _) = 
           "s/" ++ quoteL ++ sedEscape u ++ quoteR ++ "/" ++ quoteL ++ sedEscape e ++ quoteR ++ "/g\n"

genSedUnescapeScript :: String
genSedUnescapeScript = do
  code <- codes
  command code
    where
      command :: Code -> String
      command (Code u e l _) = 
           "s/" ++ quoteL ++ sedEscape e ++ quoteR ++ "/" ++ sedEscape u ++ "/g\n"

genSedMarkScript :: String
genSedMarkScript = do
  code <- codes
  command code
    where
      command :: Code -> String
      command (Code u e l _) =
        if u == quoteL || u == quoteR || u == "\\"
           then ""
           else "s/" ++ sedEscape u ++ "/" ++ quoteL ++ sedEscape u ++ quoteR ++ "/g\n"

genLatexDemo :: String
genLatexDemo = concat
  [ "\\begin{longtable}{ll}\n"
  , middle
  , "\\end{longtable}"
  ]
  where
    middle :: String
    middle = do
      code <- codes
      command code
        where
          command :: Code -> String
          command (Code u e l _) =
            if l == "" 
              then "" 
              else concat ["\\texttt{",latexEscape e,"}&${}",l,"{}$\\\\\n"]

genInputReference :: String
genInputReference = do
  code <- codes
  command code
    where
      command :: Code -> String
      command (Code u e l _) =
        skip pad maxCodeWidth u ++ "  " ++ e ++ "\n"
      maxCodeWidth :: Int
      maxCodeWidth = maximum $ map (length . unicodeRep) codes
      pad :: Int -> String -> String
      pad i s = let padding = max 0 (i - length s) in s ++ replicate padding ' '
      skip f y x = x


codes :: [Code]
codes = 
  -- Backslash
  [ code "\\"  "\\"

  -- Arrows
  -- - normal
  , lcode "↑" "u" "\\uparrow"
  , lcode "→" "r" "\\rightarrow"
  , lcode "↓" "d" "\\downarrow"
  , lcode "←" "l" "\\leftarrow"
  , lcode "↗" "ur" "\\nearrow"
  , lcode "↘" "dr" "\\searrow"
  , code "↙" "dl"
  , code "↖" "ul"
  , code "↕" "ud-"
  , lcode "↔" "rl-" "\\leftrightarrow"
  , code "⇈" "uu"
  , lcode "⇉" "rr" "\\rightrightarrows"
  , code "⇊" "dd"
  , code "⇇" "ll"
  , code "⇅" "ud"
  , code "⇵" "du"
  , lcode "⇄" "rl" "\\rightleftarrows"
  , code "⇆" "lr"
  -- - open
  , lcode "⇑" "u=" "\\Uparrow"
  , lcode "⇒" "r=" "\\Rightarrow"
  , lcode "⇓" "d=" "\\Downarrow"
  , lcode "⇐" "l=" "\\Leftarrow"
  , code "⇕" "ud="
  , lcode "⇔" "rl=" "\\Leftrightarrow"
  , code "⇏" "r=/"
  , code "⇍" "l=/"
  , code "⇎" "rl=/"
  , code "⇗" "ur="
  , code "⇘" "dr="
  , code "⇙" "dl="
  , code "⇖" "ul="
  , lcode "⇛" "r==" "\\Rrightarrow"
  , lcode "⇚" "l==" "\\Lleftarrow"
  -- - long
  , lcode "⟹" "impr" "\\implies"
  , lcode "⟸" "impl" "\\impliedby"
  , lcode "⟺" "iff" "\\iff"
  -- - closed
  , code "⇧" "u|" -- "\\upwhitearrow"
  , code "⇨" "r|" -- "\\rightwhitearrow"
  , code "⇩" "d|" -- "\\downwhitearrow"
  , code "⇦" "l|" -- "\\leftwhitearrow"
  , code "⬄" "rl|"
  , lcode "⇰"  "r|=" "\\Mapsto"
  -- - partial
  , lcode "⇀" "r\\" "\\rightharpoonup"
  -- - maps
  , code "↥" "u|-"
  , lcode "↦" "r|-" "\\mapsto"
  , code "↧" "d|-"
  , code "↤" "l|-"
  -- hook
  , lcode "↪" "rh" "\\hookrightarrow"
  , lcode "↩" "lh" "\\hookleftarrow"
  , code "↬" "rc"
  , code "↫" "lc"
  -- - ending bar
  , code "⇥" "r>|" -- "\\RightArrowBar"
  , code "⇤" "l>|" -- "\\LeftArrowBar"
  -- - double
  , code "↟" "u>>" -- "\\twoheaduparrow"
  , code "↠" "r>>" -- "\\twoheadrightarrow"
  , code "↡" "d>>" -- "\\twoheaduparrow"
  , code "↞" "l>>" -- "\\twoheadleftarrow"
  -- - triangle
  , lcode "⇾" "r|>" "\\rightarrowtriangle"
  , lcode "⇽" "l|>" "\\leftarrowtriangle"
  , lcode "⇿" "rl|>" "\\leftrightarrowtriangle"
  -- - squiggle
  , lcode "↝" "r~" "\\rightsquigarrow"
  , code "↜" "l~"
  , code "↭" "rl~"
  -- tail
  , lcode "↣" "r>->" "\\rightarrowtail"
  , lcode "↢" "l>->" "\\leftarrowtail"
  -- - double squiggle
  , code "⇝" "r~~" -- "\\rightsquigarrow"
  , code "⇜" "l~~" -- "\\leftsquigarrow"
  -- - dotted
  , code "⇡" "u."
  , lcode "⇢" "r." "\\dashrightarrow"
  , code "⇣" "d."
  , lcode "⇠" "l." "\\dashleftarrow"
  -- - stroke
  , code "↛" "r/"
  , code "↚" "l/"
  , code "↮" "rl/"
  -- - lolli
  , lcode "⊸" "ro" "\\multimap"
  , code "⟜" "lo"
  , code "⧟" "rlo"
  -- - zagged
  , lcode "↯" "zd" "\\lightning"
  , code "↻" "cw"
  , code "↺" "ccw"

  -- Brackets
  -- - paren
  , lcode "⟮" "(" "\\lgroup"
  , lcode "⟯" ")" "\\rgroup"
  , code "⸨" "(("
  , code "⸩" "))"
  , code "⦇" "(|" -- "\\limg"
  , code "⦈" ")|" -- "\\rimg"
  , code "⦅" "c(" -- "\\Lparen"
  , code "⦆" "c)" -- "\\Rparen"
  , code "❪" "b("
  , code "❫" "b)"
  , code "❨" "B("
  , code "❩" "B)"
  , code "⏜" "u("
  , code "⏝" "d)"
  -- - angle
  , lcode "⟨" "<" "\\langle"
  , lcode "⟩" ">" "\\rangle"
  , code "⟪" "<<" -- "\\lang"
  , code "⟫" ">>" -- "\\rang"
  , code "⦉" "<|" -- "\\lblot"
  , code "⦊" ">|" -- "\\rblot"
  , code "⦑" "<." -- "\\langledot"
  , code "⦒" ">." -- "\\rangledot"
  , code "❬" "b<"
  , code "❭" "b>"
  , code "«" "<\""
  , code "»" ">\""
  , code "‹" "<'"
  , code "›" ">'"
  , code "⦓" "(<"
  , code "⦔" ")>"
  , code "⦕" "((>"
  , code "⦖" "))<"
  , code "⸦" "u<"
  , code "⸧" "u>"
  , code "᚜" "f<"
  , code "᚛" "f>"
  , code "⸜" "_<"
  , code "⸝" "_>"
  , code "⸌" "^<"
  , code "⸍" "^>"
  , code "⸂" "^L<"
  , code "⸃" "^L>"
  , code "⸄" "^D<"
  , code "⸅" "^D>"
  , code "⸉" "^S<"
  , code "⸊" "^S>"
  -- - square
  , code "⦗" "["
  , code "⦘" "]"
  , lcode "⟦" "[[" "\\llbracket"
  , lcode "⟧" "]]" "\\rrbracket"
  , code "⟬" "[|"
  , code "⟭" "]|"
  , code "⁅" "e["
  , code "⁆" "e]"
  , lcode "⌈" "tL" "\\lceil"
  , lcode "⌉" "tR" "\\rceil"
  , lcode "⌊" "bL" "\\lfloor"
  , lcode "⌋" "bR" "\\rfloor"
  , code "⸢" "tl"
  , code "⸣" "tr"
  , code "⸤" "bl"
  , code "⸥" "br"
  -- - curly
  , code "⦃" "{|"
  , code "⦄" "}|"
  , code "⎨" "{"
  , code "⎬" "}"
  , code "⧘" "z{"
  , code "⧙" "z}"
  , code "⧚" "z{{"
  , code "⧛" "z}}"
  , lcode "❴" "b{" "\\{"
  , lcode "❵" "b}" "\\}"
  , lcode "⟅" "s{" "\\lbag"
  , lcode "⟆" "s}" "\\rbag"

  -- Orders
  -- standard
  , code "≮" "</"
  , lcode "≤" "<=" "\\leq"
  , lcode "≥" ">=" "\\geq"
  , lcode "⋚" "<=>=" "\\lesseqgtr"
  , code "⩻" "<?"
  , code "⩼" ">?"
  , code "⪥" "><"
  , code "⪤" "><x"
  , lcode "≪" "<2" "\\ll"
  , lcode "≫" ">2" "\\gg"
  , code "⋘" "<3"
  , code "⋙" ">3"
  , code "≫=" ">>="
  , code "≪=" "<<="
  , code "⊻" "xo|"
  , code "⊼" "nand"
  , code "⊽" "nor"
  -- standard thick (h_)
  , code "⪡" "h<"
  , code "⪢" "h>"
  , code "⩔" "hor"
  , code "⩓" "hand"
  -- double thick (H_)
  , code "⩕" "Hand"
  , code "⩖" "Hor"
  -- standard circ (_o)
  , code "⩹" "<o"
  , code "⩺" ">o"
  -- standard dot (d_)
  , code "⋖" "d<"
  , code "⋗" "d>"
  , code "⩿" "d<="
  , code "⪀" "d>="
  , code "⟇" "dor"
  , code "⟑" "dand"
  -- standard split (m_)
  , code "⪪" "m<"
  , code "⪫" "m>"
  , code "⪬" "m<="
  , code "⪭" "m>="
  , code "⩤" "m<|"
  , code "⩥" "m>|"
  , code "⩚" "mand"
  , code "⩛" "mor"
  -- standard curvy (e_)
  , lcode "≺" "e<" "\\prec"
  , code "≻" "e>" -- "\\suc"
  , lcode "⪯" "e<-" "\\preceq"
  , code "⪰" "e>-" -- "\\suceq"
  , lcode "≼" "e<=" "\\preccurlyeq"
  , code "≽" "e>=" -- "\\succurlyeq"
  , lcode "⋎" "eor" "\\curlyvee"
  , lcode "⋏" "eand" "\\curlywedge"
  , code "⪻" "e<<"
  , code "⪼" "e>>"
  -- standard  triangle (t_)
  , lcode "⊴" "t<=" "\\trianglelefteq"
  , lcode "⊵" "t>=" "\\trianglerighteq"
  , code "⊲" "t<"
  , code "⊳" "t>"
  , code "⧎" "t<>"
  , code "⧏" "t<|"
  , code "⧐" "t>|"
  , lcode "⋬" "t<=/" "\\ntrianglelefteq"
  , lcode "⋭" "t>=/" "\\ntrianglerighteq"
  -- standard closed triangle (ct_)
  , code "⪦" "ct<"
  , code "⪧" "ct>"
  , code "⪨" "ct<="
  , code "⪩" "ct>="
  , code "⌔" "ctor"
  -- standard y (y_)
  , code "⧼" "y<" -- "\\lcurvyangle"
  , code "⧽" "y>" -- "\\rcurvyangle"
  -- - squigly order (Y_)
  , code "⊰" "Y<"
  , code "⊱" "Y>"
  -- subset (s_)
  , code "⊂" "s<"
  , code "⊃" "s>"
  , lcode "⊆" "s<=" "\\subseteq"
  , lcode "⊇" "s>=" "\\supseteq"
  , lcode "⊈" "s<=/" "\\not\\subseteq"
  , lcode "⊉" "s>=/" "\\not\\supseteq"
  , code "⊊" "s</="
  , code "⊋" "s>/="
  , lcode "⊄" "s</" "\\not\\subset"
  , lcode "⊅" "s>/" "\\not\\supset"
  , lcode "∪" "su" "\\cup"
  , lcode "∩" "si" "\\cap"
  , lcode "⋃" "sU" "\\bigcup"
  , lcode "⋂" "sI" "\\bigcap"
  , lcode "⊎" "su+" "\\uplus"
  , code "⨄" "sU+"
  -- subset dot (ds_)
  , code "⪽" "s<."
  , code "⪾" "s>."
  , code "⊍" "su."
  , code "⩀" "si."
  -- subset closed (cs_)
  , code "⫏" "s<|"
  , code "⫐" "s>|"
  , code "⫑" "s<=|"
  , code "⫒" "s>=|"
  , code "⩌" "su|"
  , code "⩍" "si|"
  -- subset thick (hs_)
  , code "⋐" "hs<"
  , code "⋑" "hs>"
  , code "⋓" "hsu"
  , code "⋒" "hsi"
  -- partial order (q_)
  , lcode "⊑" "q<=" "\\sqsubseteq"
  , lcode "⊒" "q>=" "\\sqsupseteq"
  , lcode "⊏" "q<" "\\sqsubset"
  , lcode "⊐" "q>" "\\sqsupset"
  , code "⋢" "q<=/" -- "\\nsqsubseteq"
  , code "⋣" "q>=/" -- "\\nsqsupseteq"
  , code "⋤" "q</=" -- "\\sqsubsetneq"
  , code "⋥" "q>/=" -- "\\sqsupsetneq"
  , lcode "⊔" "j" "\\sqcup"
  , lcode "⊓" "m" "\\sqcap"
  , lcode "⨆" "J" "\\bigsqcup"
  , lcode "⨅" "M" "\\bigsqcap"
  -- partial order thick (h_)
  , code "⩏" "hj"
  , code "⩎" "hm"
  , code "⩊" "w"

  -- Quotes
  , code "‘" "'<"
  , code "’" "'>"
  , code "‛" "'`"
  , lcodet "“" "\"<" "``"
  , lcodet "”" "\">" "''"
  , code "„" ",,"
  , code "‟" "\"`"
  , lcodet "–" "--" "--"
  , lcodet "—" "---" "---"
  , lcode "′" "'" "^{\\prime}"
  , lcode "″" "''" "^{\\prime\\prime}"
  , lcode "‴" "'''" "^{\\prime\\prime\\prime}"
  , code "‵" "`"
  , code "‶" "``"
  , code "‷" "```"

  -- Operators
  , lcode "⋅" "." "\\cdotp"
  , code "∙" ".bu"
  , lcode "∶" ":" ":"
  , code "⁝" ":3"
  , code "⁞" ":4"
  , code "ː" "t:"
  , code "꞉" "s:"
  , lcode "∴" "ther" "\\therefore"
  , lcode "∵" "bec" "\\because"
  , lcode "∷" "::" "::"
  , lcode "‥" ".." ".."
  , lcode "…" "..." "\\ldots"
  , lcode "⋯" "c..." "\\cdots"
  , lcode "⋮" "v..." "\\vdots"
  , code "⁖" ".:"
  , code "⁘" ".:."
  , code "⁙" ":.:"
  , lcode "∘" "o" "\\circ"
  , code "⦂" "o:"
  , code "⨟" "o;"
  , code "⍪" ",|"
  , code "⌄" "d^"
  , code "˙" ".^"
  , code "꘍" "and,"
  , code "∣" "|"
  , code "∤" "|/"
  , code "¦" "|:"
  , code "⫾" "o|"
  , lcode "‖" "||" "\\|"
  , code "÷" "%"
  , code "∕" "/"
  , lcode "∖" "set\\" "\\setminus"
  , lcode "⫽" "//" "\\sslash"
  , code "⅋" "par"
  , code "⫻" "///"
  , lcode "∅" "O/" "\\varnothing"
  , lcode "⋆" "*" "\\star"
  , lcode "★" "star" "\\bigstar"
  , code "⋇" "**"
  , lcode "♯" "#" "\\sharp"
  , code "𝄪" "##"
  , lcode "♭" "b" "\\flat"
  , lcode "♮" "na" "\\natural"
  , code "⋕" "=||" -- "\\hash"
  , code "¿" "d?"
  , code "¡" "d!"
  , code "⁇" "??"
  , code "‼" "!!"
  , code "⁈" "?!"
  , code "⁉" "!?"
  , lcode "⧺" "++" "\\mathbin{{+}\\mspace{-8mu}{+}}"
  , lcode "×" "x" "\\times"
  , code "⨯" "xx"
  , code "⨳" "XX"
  , code "⤨" "swap"
  , code "⌾" "Oo"
  , lcode "⊙" "o." "\\odot"
  , lcode "⊕" "o+" "\\oplus"
  , lcode "⊖" "o-" "\\ominus"
  , lcode "⊗" "ox" "\\otimes"
  , code "⦼" "o%"
  , code "⦹" "obot"
  , code "⊘" "o/"
  , lcode "⊚" "oo" "\\circledcirc"
  , lcode "⊛" "o*" "\\circledast"
  , code "⊜" "o="
  , code "⊝" "o--"
  , lcode "⧀" "o<" "\\olessthan"
  , code "⧁" "o>"
  , code "⎊" "ot"
  , code "⋄" ".di"
  , lcode "◇" "di" "\\diamond"
  , code "⟐" "di."
  , lcode "□" "s" "\\square"
  , lcode "⊞" "s+" "\\boxplus"
  , lcode "⊟" "s-" "\\boxminus"
  , lcode "⊠" "sx" "\\boxtimes"
  , lcode "⊡" "s." "\\boxdot"
  , code "⧄" "s/"
  , code "⧅" "s\\"
  , code "⧆" "s*"
  , code "⧇" "so"
  , code "⧈" "ss"
  , code "⧉" "sss"
  , code "⎅" "s|"
  , code "○" "O"
  , lcode "∎" "qed" "\\blacksquare"
  , code "⌿" "-/" -- "\\notslash"
  , code "∿" "sin"
  , code "∾" "link"
  , lcode "⋈" "bow" "\\bowtie"
  , code "⧖" "hour"
  , lcode "⋉" "bowl" "\\ltimes"
  , lcode "⋊" "bowr" "\\rtimes"
  , lcode "∞" "inf" "\\inf"
  , lcode "∝" "inf<" "\\propto"
  , lcode "△" "tru" "\\vartriangle"
  , lcode "▷" "trr" "\\vartriangleright"
  , lcode "▽" "trd" "\\triangledown"
  , lcode "◁" "trl" "\\vartriangleleft"
  , code "⨹" "t+"
  , code "⨺" "t-"
  , code "⨻" "tx"
  , code "⟁" "tt"
  , code "⟡" "cd"
  , code "⟢" "cd>"
  , code "⟣" "cd<"
  , code "⟤" "sq>"
  , code "⟥" "sq<"
  , code "⌑" "loz"
  , code "⟠" "d<>"
  , code "⌁" "zap"
  , lcode "†" "dag" "\\dagger"
  , code "‡" "ddag"
  , code "⁂" "***"
  , code "∫" "int"
  , code "¢" "cent"
  , code "⧂" "nip"
  , code "⌌" "br+"
  , code "⌍" "bl+"
  , code "⌎" "tr+"
  , code "⌏" "tl+"
  , code "⌜" "tlc"
  , code "⌝" "trc"
  , code "⌞" "blc"
  , code "⌟" "brc"
  , code "⌲" ">-"
  , code "⚖" "scales"
  , code "√" "root"
 
  -- Logic
  , lcode "∈" "in" "\\in"
  , code "⋵" "in."
  , code "⋳" "in|"
  , code "⋹" "in="
  , code "⋲" "in-"
  , code "⋺" "in-l"
  , lcode "∉" "in/" "\\notin"
  , lcode "∋" "inl" "\\ni"
  , code "⋻" "in|l"
  , code "⟒" "inu"
  , code "⫙" "ind"
  , code "∊" "ele"
  , code "∍" "elel"
  , code "⋴" "ele|"
  , code "⋼" "ele|l"
  , code "⋿" "mem"
  , lcode "∀" "all" "\\forall"
  , lcode "∃" "ex" "\\exists"
  , lcode "∄" "ex/" "\\nexists"
  , lcode "⊢" "|-" "\\vdash"
  , lcode "⊣" "-|" "\\dashv"
  , lcode "⊨" "|=" "\\models"
  , lcode "∨" "or" "\\vee"
  , lcode "∧" "and" "\\wedge"
  , code "⩙" "andor"
  , lcode "⊥" "bot" "\\bot"
  , code "⫫" "bot="
  , lcode "⊤" "top" "\\top"
  , lcode "¬" "not" "\\neg"
  , code "∁" "comp"

 
  -- Equality
  , lcode "≡" "==" "\\equiv"
  , code "≢" "==/" -- "\\nequiv"
  , code "≣" "==="
  , code "⩵" "=2"
  , code "⩶" "=3"
  , lcode "≃" "~=" "\\simeq"
  , lcode "≈" "~~" "\\approx"
  , code "≉" "~~/"
  , lcode "∼" "~" "\\sim"
  , code "≁" "~/"
  , lcode "≔" ":=" "\\coloneqq"
  , code "≕" "=:"
  , lcode "⩴" "::=" "\\Coloneqq"
  , lcode "≠" "=/" "\\neq"
  , lcode "≟" "=?" "\\stackrel{?}{=}"
  , code "≗" "=o"
  , code "⩮" "=*"
  , code "⧣" "=//"
  , code "≌" "=s"
  , code "≛" "=star"
  , code "⩯" "~~^"
  , lcode "≜" "=t" "\\triangleq"
  , code "≝" "=def"
  , code "≍" "eqv"
  , code "≭" "eqv/"
  , code "█" "block"
 
  -- Subscripts
  , lcode "₊" "_+" "_+"
  , lcode "₋" "_-" "_-"
  , lcode "₌" "_=" "_="
  , lcode "₍" "_(" "("
  , lcode "₎" "_)" ")"
  
  -- Superscripts
  , lcode "⁺" "^+" "^+"
  , lcode "⁻" "^-" "^-"
  , lcode "⁼" "^=" "^="
  , lcode "⁽" "^(" "^("
  , lcode "⁾" "^)" "^)"
  , code "˚" "^^o"
  , code "⑅" "^bow"
  , code "ᐜ" "^uu"
  , code "ᐞ" "^tr"
  , code "ᐟ" "^/"
  , code "ᐠ" "^\\"
  , code "ᐡ" "^un"
  , code "ᐢ" "^in"
  , code "ᐣ" "^su"
  , code "ᐥ" "^//"
  , code "ᐦ" "^||"
  , code "ᐪ" "^top"
  , code "ᐧ" "^."

  -- Combining Subscripts
  -- Combining Superscripts
  
  -- , code "֮" "^nu"
  -- , code "̂" "^^^"
  -- , code "᷾" "^^<"
  -- , code "͐" "^^>"
  -- , code "⃖" "^^<-"
  -- , code "⃗" "^^->"
  -- , code "̃" "^^~"
  -- , code "̑" "^^("
  -- , code "͌" "^~~"

  -- Markup
  , code "¶" "PP"
  , code "␣" "_"
  , code "‗" "__"
  , code "﹍" "___"
  , code "﹏" "~_"
  , code "‿" "utie"
  , code "⁔" "iutie"
  , code "␠" "sp"
  , lcode "§" "SS" "\\S"
 
  -- Bullets
  , lcode "•" "bu" "\\bullet"
  , lcode "◦" "obu" "\\circ"
  , code "⁃" "-bu"
  , code "‣" "tbu"
  , code "⁌" "lbu"
  , code "⁍" "rbu"
  , code "◘" "ibu"
  , code "❥" "hbu"
  , code "☙" "hlbu"
  , code "❧" "hrbu"
  , code "⦿" "buo"
  , code "⦾" "obuo"
 
  -- OK
  , lcode "✓" "check" "\\checkmark"
  , code "✗" "X" -- "\\ballotx"
  , code "☐" "bal"
  , code "☑" "balc"
  , code "☒" "balx"

  -- emoji
  -- based off of https://github.com/dysfunc/ascii-emoji
  -- inspiration for more: https://en.wikipedia.org/wiki/List_of_emoticons
  , code "ಠ_ಠ" "disapprove"
  , code "﹙╯°□°）╯︵┻━┻" "flip"
  , code "┬─┬ノ﹙゜-゜ノ﹚" "putback"
  , code "┬─┬⃰͡ ﹙ᵔᵕᵔ͜ ﹚" "dust"
  , code "┻━┻︵ヽ﹙`Д´﹚ﾉ︵┻━┻" "doubleflip"
  , code "ლ﹙｀ー´ლ﹚" "fisticuffs"
  , code "¯\\_﹙ツ﹚_/¯" "shrug"
  , code "¯\\﹙°_o﹚/¯" "meh"
  , code "﹙╬ಠ益ಠ﹚" "angry"
  , code "ฅ^•ﻌ•^ฅ" "meow"
  , code "﹙^_^）o自自o（^_^﹚" "cheers"
  , code "ಥ_ಥ" "crying"
  , code "ಥ﹏ಥ" "breakdown"
  , code "٩◔̯◔۶" "disagree"
  , code "ᕙ﹙⇀‸↼‶﹚ᕗ" "flex"
  , code "¯\\_﹙⊙︿⊙﹚_/¯" "sadconfused"
  , code "щ（ﾟДﾟщ）" "ytho"
  , code "ᕕ﹙ᐛ﹚ᕗ" "strut"
  , code "t﹙-_-t﹚" "fkit"
  , code "눈_눈" "sleepy"
  , code "ヾ﹙´〇`﹚ﾉ♪♪♪" "opera"
  , code "[¬º-°]¬" "zombie"
  , code "﹙☞ﾟヮﾟ﹚☞" "point"
  , code "💩" "poo"

  -- Greek Normal
  , code "Α" "Alpha" -- "\\Alpha"
  , code "Β" "Beta" -- "\\Beta"
  , lcode "Γ" "Gamma" "\\Gamma"
  , lcode "Δ" "Delta" "\\Delta"
  , code "Ε" "Epsilon" -- "\\Epsilon"
  , code "Ζ" "Zeta" -- "\\Zeta"
  , code "Η" "Eta" -- "\\Eta"
  , lcode "Θ" "Theta" "\\Theta"
  , code "Ι" "Iota" -- "\\Iota"
  , code "Κ" "Kappa" -- "\\Kappa"
  , lcode "Λ" "Lambda" "\\Lambda"
  , code "Μ" "Mu" -- "\\Mu"
  , code "Ν" "Nu" -- "\\Nu"
  , lcode "Ξ" "Xi" "\\Xi"
  , code "Ο" "Omicron" -- "\\Omicron"
  , lcode "Π" "Pi" "\\Pi"
  , code "Ρ" "Rho" -- "\\Rho"
  , lcode "ϴ" "varSigma" "\\varSigma"
  , lcode "Σ" "Sigma" "\\Sigma"
  , code "Τ" "Tau" -- "\\Tau"
  , code "Υ" "Upsilon" -- "\\Upsilon"
  , lcode "Φ" "Phi" "\\Phi"
  , code "Χ" "Chi" -- "\\Chi"
  , lcode "Ψ" "Psi" "\\Psi"
  , lcode "Ω" "Omega" "\\Omega"
  , lcode "∇" "Nabla" "\\nabla"
                                      
  , lcode "α" "alpha" "\\alpha"
  , lcode "β" "beta" "\\beta"
  , lcode "γ" "gamma" "\\gamma"
  , lcode "δ" "delta" "\\delta"
  , lcode "ε" "epsilon" "\\epsilon"
  , lcode "ζ" "zeta" "\\zeta"
  , lcode "η" "eta" "\\eta"
  , lcode "θ" "theta" "\\theta"
  , lcode "ι" "iota" "\\iota"
  , lcode "κ" "kappa" "\\kappa"
  , lcode "λ" "lambda" "\\lambda"
  , lcode "μ" "mu" "\\mu"
  , lcode "ν" "nu" "\\nu"
  , lcode "ξ" "xi" "\\xi"
  , code "ο" "omicron" -- "\\omicron"
  , lcode "π" "pi" "\\pi"
  , lcode "ρ" "rho" "\\rho"
  , lcode "ς" "varsigma" "\\varsigma"
  , lcode "σ" "sigma" "\\sigma"
  , lcode "τ" "tau" "\\tau"
  , lcode "υ" "upsilon" "\\upsilon"
  , lcode "φ" "phi" "\\phi"
  , lcode "χ" "chi" "\\chi"
  , lcode "ψ" "psi" "\\psi"
  , lcode "ω" "omega" "\\omega"
  , code "∂" "nabla"
                                      
  , lcode "ϵ" "varepsilon" "\\varepsilon"
  , lcode "ϑ" "vartheta" "\\vartheta"
  , lcode "ϰ" "varkappa" "\\varkappa"
  , lcode "ϕ" "varphi" "\\varphi"
  , lcode "ϱ" "varrho" "\\varrho"
  , lcode "ϖ" "varpi" "\\varpi"

  -- Greek Bold
  , code "𝚨" "bdAlpha"
  , code "𝚩" "bdBeta"
  , code "𝚪" "bdGamma"
  , code "𝚫" "bdDelta"
  , code "𝚬" "bdEpsilon"
  , code "𝚭" "bdZeta"
  , code "𝚮" "bdEta"
  , code "𝚯" "bdTheta"
  , code "𝚰" "bdIota"
  , code "𝚱" "bdKappa"
  , code "𝚲" "bdLambda"
  , code "𝚳" "bdMu"
  , code "𝚴" "bdNu"
  , code "𝚵" "bdXi"
  , code "𝚶" "bdOmicron"
  , code "𝚷" "bdPi"
  , code "𝚸" "bdRho"
  , code "𝚹" "bdvarSigma"
  , code "𝚺" "bdSigma"
  , code "𝚻" "bdTau"
  , code "𝚼" "bdUpsilon"
  , code "𝚽" "bdPhi"
  , code "𝚾" "bdChi"
  , code "𝚿" "bdPsi"
  , code "𝛀" "bdOmega"
  , code "𝛁" "bdNabla"

  , code "𝛂" "bdalpha"
  , code "𝛃" "bdbeta"
  , code "𝛄" "bdgamma"
  , code "𝛅" "bddelta"
  , code "𝛆" "bdepsilon"
  , code "𝛇" "bdzeta"
  , code "𝛈" "bdldeta"
  , code "𝛉" "bdtheta"
  , code "𝛊" "bdiota"
  , code "𝛋" "bdkappa"
  , code "𝛌" "bdlambda"
  , code "𝛍" "bdmu"
  , code "𝛎" "bdnu"
  , code "𝛏" "bdxi"
  , code "𝛐" "bdomicron"
  , code "𝛑" "bdpi"
  , code "𝛒" "bdrho"
  , code "𝛓" "bdvarsigma"
  , code "𝛔" "bdsigma"
  , code "𝛕" "bdtau"
  , code "𝛖" "bdupsilon"
  , code "𝛗" "bdphi"
  , code "𝛘" "bdchi"
  , code "𝛙" "bdpsi"
  , code "𝛚" "bdomega"
  , code "𝛛" "bdnabla"

  , code "𝛜" "bdvarepsilon"
  , code "𝛝" "bdvartheta"
  , code "𝛞" "bdvarkappa"
  , code "𝛟" "bdvarphi"
  , code "𝛠" "bdvarrho"
  , code "𝛡" "bdvarpi"

  -- Greek Italic
  , code "𝛢" "itAlpha"
  , code "𝛣" "itBeta"
  , code "𝛤" "itGamma"
  , code "𝛥" "itDelta"
  , code "𝛦" "itEpsilon"
  , code "𝛧" "itZeta"
  , code "𝛨" "itEta"
  , code "𝛩" "itTheta"
  , code "𝛪" "itIota"
  , code "𝛫" "itKappa"
  , code "𝛬" "itLambda"
  , code "𝛭" "itMu"
  , code "𝛮" "itNu"
  , code "𝛯" "itXi"
  , code "𝛰" "itOmicron"
  , code "𝛱" "itPi"
  , code "𝛲" "itRho"
  , code "𝛳" "itvarSigma"
  , code "𝛴" "itSigma"
  , code "𝛵" "itTau"
  , code "𝛶" "itUpsilon"
  , code "𝛷" "itPhi"
  , code "𝛸" "itChi"
  , code "𝛹" "itPsi"
  , code "𝛺" "itOmega"
  , code "𝛻" "itNabla"

  , code "𝛼" "italpha"
  , code "𝛽" "itbeta"
  , code "𝛾" "itgamma"
  , code "𝛿" "itdelta"
  , code "𝜀" "itepsilon"
  , code "𝜁" "itzeta"
  , code "𝜂" "iteta"
  , code "𝜃" "ittheta"
  , code "𝜄" "itiota"
  , code "𝜅" "itkappa"
  , code "𝜆" "itlambda"
  , code "𝜇" "itmu"
  , code "𝜈" "itnu"
  , code "𝜉" "itxi"
  , code "𝜊" "itomicron"
  , code "𝜋" "itpi"
  , code "𝜌" "itrho"
  , code "𝜍" "itvarsigma"
  , code "𝜎" "itsigma"
  , code "𝜏" "ittau"
  , code "𝜐" "itupsilon"
  , code "𝜑" "itphi"
  , code "𝜒" "itchi"
  , code "𝜓" "itpsi"
  , code "𝜔" "itomega"
  , code "𝜕" "itnabla"

  , code "𝜖" "itvarepsilon"
  , code "𝜗" "itvartheta"
  , code "𝜘" "itvarkappa"
  , code "𝜙" "itvarphi"
  , code "𝜚" "itvarrho"
  , code "𝜛" "itvarpi"

  -- Greek Bold Italic
  , code "𝜜" "bditAlpha"
  , code "𝜝" "bditBeta"
  , code "𝜞" "bditGamma"
  , code "𝜟" "bditDelta"
  , code "𝜠" "bditEpsilon"
  , code "𝜡" "bditZeta"
  , code "𝜢" "bditEta"
  , code "𝜣" "bditTheta"
  , code "𝜤" "bditIota"
  , code "𝜥" "bditKappa"
  , code "𝜦" "bditLambda"
  , code "𝜧" "bditMu"
  , code "𝜨" "bditNu"
  , code "𝜩" "bditXi"
  , code "𝜪" "bditOmicron"
  , code "𝜫" "bditPi"
  , code "𝜬" "bditRho"
  , code "𝜭" "bditvarSigma"
  , code "𝜮" "bditSigma"
  , code "𝜯" "bditTau"
  , code "𝜰" "bditUpsilon"
  , code "𝜱" "bditPhi"
  , code "𝜲" "bditChi"
  , code "𝜳" "bditPsi"
  , code "𝜴" "bditOmega"
  , code "𝜵" "bditNabla"

  , code "𝜶" "bditalpha"
  , code "𝜷" "bditbeta"
  , code "𝜸" "bditgamma"
  , code "𝜹" "bditdelta"
  , code "𝜺" "bditepsilon"
  , code "𝜻" "bditzeta"
  , code "𝜼" "bditeta"
  , code "𝜽" "bdittheta"
  , code "𝜾" "bditiota"
  , code "𝜿" "bditkappa"
  , code "𝝀" "bditlambda"
  , code "𝝁" "bditmu"
  , code "𝝂" "bditnu"
  , code "𝝃" "bditxi"
  , code "𝝄" "bditomicron"
  , code "𝝅" "bditpi"
  , code "𝝆" "bditrho"
  , code "𝝇" "bditvarsigma"
  , code "𝝈" "bditsigma"
  , code "𝝉" "bdittau"
  , code "𝝊" "bditupsilon"
  , code "𝝋" "bditphi"
  , code "𝝌" "bditchi"
  , code "𝝍" "bditpsi"
  , code "𝝎" "bditomega"
  , code "𝝏" "bditnabla"

  , code "𝝐" "bditeepsilon"
  , code "𝝑" "bditttheta"
  , code "𝝒" "bditkkappa"
  , code "𝝓" "bditpphi"
  , code "𝝔" "bditrrho"
  , code "𝝕" "bditppi"

  -- Greek Subscript
  , code "ᵦ" "_beta"
  , code "ᵧ" "_gamma"
  , code "ᵨ" "_rho"
  , code "ᵩ" "_phi"
  , code "ᵪ" "_chi"

  -- Greek Superscript
  , code "ᵅ" "^alpha"
  , code "ᵝ" "^beta"
  , code "ᵞ" "^gamma"
  , code "ᵟ" "^delta"
  , code "ᵋ" "^epsilon"
  , code "ᶿ" "^theta"
  , code "ᶥ" "^iota"
  , code "ᶲ" "^Phi"
  , code "ᵠ" "^phi"
  , code "ᵡ" "^chi"

  -- Greek Blackboard Bold
  , code "ℾ" "bbGamma"
  , code "ℽ" "bbgamma"
  , code "ℿ" "bbPi"
  , code "ℼ" "bbpi"
  , code "⅀" "bbSigma"

  -- Numbers Bold
  , code "𝟎" "bd0"
  , code "𝟏" "bd1"
  , code "𝟐" "bd2"
  , code "𝟑" "bd3"
  , code "𝟒" "bd4"
  , code "𝟓" "bd5"
  , code "𝟔" "bd6"
  , code "𝟕" "bd7"
  , code "𝟖" "bd8"
  , code "𝟗" "bd9"

  -- Numbers Blackboard Bold
  , lcodet "𝟘" "bb0" "\\mathbb{0}"
  , lcodet "𝟙" "bb1" "\\mathbb{1}"
  , lcodet "𝟚" "bb2" "\\mathbb{2}"
  , lcodet "𝟛" "bb3" "\\mathbb{3}"
  , lcodet "𝟜" "bb4" "\\mathbb{4}"
  , lcodet "𝟝" "bb5" "\\mathbb{5}"
  , lcodet "𝟞" "bb6" "\\mathbb{6}"
  , lcodet "𝟟" "bb7" "\\mathbb{7}"
  , lcodet "𝟠" "bb8" "\\mathbb{8}"
  , lcodet "𝟡" "bb9" "\\mathbb{9}"

  -- Numbers Subscript
  , lcode "₀" "_0" "_0"
  , lcode "₁" "_1" "_1"
  , lcode "₂" "_2" "_2"
  , lcode "₃" "_3" "_3"
  , lcode "₄" "_4" "_4"
  , lcode "₅" "_5" "_5"
  , lcode "₆" "_6" "_6"
  , lcode "₇" "_7" "_7"
  , lcode "₈" "_8" "_8"
  , lcode "₉" "_9" "_9"

  -- Numbers Superscript
  , lcode "⁰" "^0" "^0"
  , lcode "¹" "^1" "^1"
  , lcode "²" "^2" "^2"
  , lcode "³" "^3" "^3"
  , lcode "⁴" "^4" "^4"
  , lcode "⁵" "^5" "^5"
  , lcode "⁶" "^6" "^6"
  , lcode "⁷" "^7" "^7"
  , lcode "⁸" "^8" "^8"
  , lcode "⁹" "^9" "^9"

  -- Fractions
  , lcode "½" "1/2"  "\\nicefrac{1}{2}"
  , lcode "↉" "0/3"  "\\nicefrac{0}{3}"
  , lcode "⅓" "1/3"  "\\nicefrac{1}{3}"
  , lcode "⅔" "2/3"  "\\nicefrac{2}{3}"
  , lcode "¼" "1/4"  "\\nicefrac{1}{4}"
  , lcode "¾" "3/4"  "\\nicefrac{3}{4}"
  , lcode "⅕" "1/5"  "\\nicefrac{1}{5}"
  , lcode "⅖" "2/5"  "\\nicefrac{2}{5}"
  , lcode "⅗" "3/5"  "\\nicefrac{3}{5}"
  , lcode "⅘" "4/5"  "\\nicefrac{4}{5}"
  , lcode "⅙" "1/6"  "\\nicefrac{1}{6}"
  , lcode "⅚" "5/6"  "\\nicefrac{5}{6}"
  , lcode "⅐" "1/7"  "\\nicefrac{1}{7}"
  , lcode "⅛" "1/8"  "\\nicefrac{1}{8}"
  , lcode "⅜" "3/8"  "\\nicefrac{3}{8}"
  , lcode "⅝" "5/8"  "\\nicefrac{5}{8}"
  , lcode "⅞" "7/8"  "\\nicefrac{7}{8}"
  , lcode "⅑" "1/9"  "\\nicefrac{1}{9}"
  , lcode "⅒" "1/10" "\\nicefrac{1}{10}"

  -- Weierstrass p
  , lcode "℘" "wp" "\\wp"
  -- "ell"
  , lcode "ℓ" "ell" "\\ell"

  -- Roman Bold
  , lcodet "𝐀" "bdA" "\\textbf{A}"
  , lcodet "𝐁" "bdB" "\\textbf{B}"
  , lcodet "𝐂" "bdC" "\\textbf{C}"
  , lcodet "𝐃" "bdD" "\\textbf{D}"
  , lcodet "𝐄" "bdE" "\\textbf{E}"
  , lcodet "𝐅" "bdF" "\\textbf{F}"
  , lcodet "𝐆" "bdG" "\\textbf{G}"
  , lcodet "𝐇" "bdH" "\\textbf{H}"
  , lcodet "𝐈" "bdI" "\\textbf{I}"
  , lcodet "𝐉" "bdJ" "\\textbf{J}"
  , lcodet "𝐊" "bdK" "\\textbf{K}"
  , lcodet "𝐋" "bdL" "\\textbf{L}"
  , lcodet "𝐌" "bdM" "\\textbf{M}"
  , lcodet "𝐍" "bdN" "\\textbf{N}"
  , lcodet "𝐎" "bdO" "\\textbf{O}"
  , lcodet "𝐏" "bdP" "\\textbf{P}"
  , lcodet "𝐐" "bdQ" "\\textbf{Q}"
  , lcodet "𝐑" "bdR" "\\textbf{R}"
  , lcodet "𝐒" "bdS" "\\textbf{S}"
  , lcodet "𝐓" "bdT" "\\textbf{T}"
  , lcodet "𝐔" "bdU" "\\textbf{U}"
  , lcodet "𝐕" "bdV" "\\textbf{V}"
  , lcodet "𝐖" "bdW" "\\textbf{W}"
  , lcodet "𝐗" "bdX" "\\textbf{X}"
  , lcodet "𝐘" "bdY" "\\textbf{Y}"
  , lcodet "𝐙" "bdZ" "\\textbf{Z}"
  , lcodet "𝐚" "bda" "\\textbf{a}"
  , lcodet "𝐛" "bdb" "\\textbf{b}"
  , lcodet "𝐜" "bdc" "\\textbf{c}"
  , lcodet "𝐝" "bdd" "\\textbf{d}"
  , lcodet "𝐞" "bde" "\\textbf{e}"
  , lcodet "𝐟" "bdf" "\\textbf{f}"
  , lcodet "𝐠" "bdg" "\\textbf{g}"
  , lcodet "𝐡" "bdh" "\\textbf{h}"
  , lcodet "𝐢" "bdi" "\\textbf{i}"
  , lcodet "𝐣" "bdj" "\\textbf{j}"
  , lcodet "𝐤" "bdk" "\\textbf{k}"
  , lcodet "𝐥" "bdl" "\\textbf{l}"
  , lcodet "𝐦" "bdm" "\\textbf{m}"
  , lcodet "𝐧" "bdn" "\\textbf{n}"
  , lcodet "𝐨" "bdo" "\\textbf{o}"
  , lcodet "𝐩" "bdp" "\\textbf{p}"
  , lcodet "𝐪" "bdq" "\\textbf{q}"
  , lcodet "𝐫" "bdr" "\\textbf{r}"
  , lcodet "𝐬" "bds" "\\textbf{s}"
  , lcodet "𝐭" "bdt" "\\textbf{t}"
  , lcodet "𝐮" "bdu" "\\textbf{u}"
  , lcodet "𝐯" "bdv" "\\textbf{v}"
  , lcodet "𝐰" "bdw" "\\textbf{w}"
  , lcodet "𝐱" "bdx" "\\textbf{x}"
  , lcodet "𝐲" "bdy" "\\textbf{y}"
  , lcodet "𝐳" "bdz" "\\textbf{z}"

  -- Roman Itallic
  , lcodet "𝐴" "itA" "\\textit{A}"
  , lcodet "𝐵" "itB" "\\textit{B}"
  , lcodet "𝐶" "itC" "\\textit{C}"
  , lcodet "𝐷" "itD" "\\textit{D}"
  , lcodet "𝐸" "itE" "\\textit{E}"
  , lcodet "𝐹" "itF" "\\textit{F}"
  , lcodet "𝐺" "itG" "\\textit{G}"
  , lcodet "𝐻" "itH" "\\textit{H}"
  , lcodet "𝐼" "itI" "\\textit{I}"
  , lcodet "𝐽" "itJ" "\\textit{J}"
  , lcodet "𝐾" "itK" "\\textit{K}"
  , lcodet "𝐿" "itL" "\\textit{L}"
  , lcodet "𝑀" "itM" "\\textit{M}"
  , lcodet "𝑁" "itN" "\\textit{N}"
  , lcodet "𝑂" "itO" "\\textit{O}"
  , lcodet "𝑃" "itP" "\\textit{P}"
  , lcodet "𝑄" "itQ" "\\textit{Q}"
  , lcodet "𝑅" "itR" "\\textit{R}"
  , lcodet "𝑆" "itS" "\\textit{S}"
  , lcodet "𝑇" "itT" "\\textit{T}"
  , lcodet "𝑈" "itU" "\\textit{U}"
  , lcodet "𝑉" "itV" "\\textit{V}"
  , lcodet "𝑊" "itW" "\\textit{W}"
  , lcodet "𝑋" "itX" "\\textit{X}"
  , lcodet "𝑌" "itY" "\\textit{Y}"
  , lcodet "𝑍" "itZ" "\\textit{Z}"
  , lcodet "𝑎" "ita" "\\textit{a}"
  , lcodet "𝑏" "itb" "\\textit{b}"
  , lcodet "𝑐" "itc" "\\textit{c}"
  , lcodet "𝑑" "itd" "\\textit{d}"
  , lcodet "𝑒" "ite" "\\textit{e}"
  , lcodet "𝑓" "itf" "\\textit{f}"
  , lcodet "𝑔" "itg" "\\textit{g}"
  , lcodet "ℎ" "ith" "\\textit{h}"
  , lcodet "𝑖" "iti" "\\textit{i}"
  , lcodet "𝑗" "itj" "\\textit{j}"
  , lcodet "𝑘" "itk" "\\textit{k}"
  , lcodet "𝑙" "itl" "\\textit{l}"
  , lcodet "𝑚" "itm" "\\textit{m}"
  , lcodet "𝑛" "itn" "\\textit{n}"
  , lcodet "𝑜" "ito" "\\textit{o}"
  , lcodet "𝑝" "itp" "\\textit{p}"
  , lcodet "𝑞" "itq" "\\textit{q}"
  , lcodet "𝑟" "itr" "\\textit{r}"
  , lcodet "𝑠" "its" "\\textit{s}"
  , lcodet "𝑡" "itt" "\\textit{t}"
  , lcodet "𝑢" "itu" "\\textit{u}"
  , lcodet "𝑣" "itv" "\\textit{v}"
  , lcodet "𝑤" "itw" "\\textit{w}"
  , lcodet "𝑥" "itx" "\\textit{x}"
  , lcodet "𝑦" "ity" "\\textit{y}"
  , lcodet "𝑧" "itz" "\\textit{z}"

  -- Roman Bold Itallic
  , lcodet "𝑨" "bditA" "\\textbf{\\textit{A}}"
  , lcodet "𝑩" "bditB" "\\textbf{\\textit{B}}"
  , lcodet "𝑪" "bditC" "\\textbf{\\textit{C}}"
  , lcodet "𝑫" "bditD" "\\textbf{\\textit{D}}"
  , lcodet "𝑬" "bditE" "\\textbf{\\textit{E}}"
  , lcodet "𝑭" "bditF" "\\textbf{\\textit{F}}"
  , lcodet "𝑮" "bditG" "\\textbf{\\textit{G}}"
  , lcodet "𝑯" "bditH" "\\textbf{\\textit{H}}"
  , lcodet "𝑰" "bditI" "\\textbf{\\textit{I}}"
  , lcodet "𝑱" "bditJ" "\\textbf{\\textit{J}}"
  , lcodet "𝑲" "bditK" "\\textbf{\\textit{K}}"
  , lcodet "𝑳" "bditL" "\\textbf{\\textit{L}}"
  , lcodet "𝑴" "bditM" "\\textbf{\\textit{M}}"
  , lcodet "𝑵" "bditN" "\\textbf{\\textit{N}}"
  , lcodet "𝑶" "bditO" "\\textbf{\\textit{O}}"
  , lcodet "𝑷" "bditP" "\\textbf{\\textit{P}}"
  , lcodet "𝑸" "bditQ" "\\textbf{\\textit{Q}}"
  , lcodet "𝑹" "bditR" "\\textbf{\\textit{R}}"
  , lcodet "𝑺" "bditS" "\\textbf{\\textit{S}}"
  , lcodet "𝑻" "bditT" "\\textbf{\\textit{T}}"
  , lcodet "𝑼" "bditU" "\\textbf{\\textit{U}}"
  , lcodet "𝑽" "bditV" "\\textbf{\\textit{V}}"
  , lcodet "𝑾" "bditW" "\\textbf{\\textit{W}}"
  , lcodet "𝑿" "bditX" "\\textbf{\\textit{X}}"
  , lcodet "𝒀" "bditY" "\\textbf{\\textit{Y}}"
  , lcodet "𝒁" "bditZ" "\\textbf{\\textit{Z}}"
  , lcodet "𝒂" "bdita" "\\textbf{\\textit{a}}"
  , lcodet "𝒃" "bditb" "\\textbf{\\textit{b}}"
  , lcodet "𝒄" "bditc" "\\textbf{\\textit{c}}"
  , lcodet "𝒅" "bditd" "\\textbf{\\textit{d}}"
  , lcodet "𝒆" "bdite" "\\textbf{\\textit{e}}"
  , lcodet "𝒇" "bditf" "\\textbf{\\textit{f}}"
  , lcodet "𝒈" "bditg" "\\textbf{\\textit{g}}"
  , lcodet "𝒉" "bdith" "\\textbf{\\textit{h}}"
  , lcodet "𝒊" "bditi" "\\textbf{\\textit{i}}"
  , lcodet "𝒋" "bditj" "\\textbf{\\textit{j}}"
  , lcodet "𝒌" "bditk" "\\textbf{\\textit{k}}"
  , lcodet "𝒍" "bditl" "\\textbf{\\textit{l}}"
  , lcodet "𝒎" "bditm" "\\textbf{\\textit{m}}"
  , lcodet "𝒏" "bditn" "\\textbf{\\textit{n}}"
  , lcodet "𝒐" "bdito" "\\textbf{\\textit{o}}"
  , lcodet "𝒑" "bditp" "\\textbf{\\textit{p}}"
  , lcodet "𝒒" "bditq" "\\textbf{\\textit{q}}"
  , lcodet "𝒓" "bditr" "\\textbf{\\textit{r}}"
  , lcodet "𝒔" "bdits" "\\textbf{\\textit{s}}"
  , lcodet "𝒕" "bditt" "\\textbf{\\textit{t}}"
  , lcodet "𝒖" "bditu" "\\textbf{\\textit{u}}"
  , lcodet "𝒗" "bditv" "\\textbf{\\textit{v}}"
  , lcodet "𝒘" "bditw" "\\textbf{\\textit{w}}"
  , lcodet "𝒙" "bditx" "\\textbf{\\textit{x}}"
  , lcodet "𝒚" "bdity" "\\textbf{\\textit{y}}"
  , lcodet "𝒛" "bditz" "\\textbf{\\textit{z}}"

  -- Roman Caligraphy
  , lcodet "𝒜" "calA" "\\mathcal{A}"
  , lcodet "ℬ" "calB" "\\mathcal{B}"
  , lcodet "𝒞" "calC" "\\mathcal{C}"
  , lcodet "𝒟" "calD" "\\mathcal{D}"
  , lcodet "ℰ" "calE" "\\mathcal{E}"
  , lcodet "ℱ" "calF" "\\mathcal{F}"
  , lcodet "𝒢" "calG" "\\mathcal{G}"
  , lcodet "ℋ" "calH" "\\mathcal{H}"
  , lcodet "ℐ" "calI" "\\mathcal{I}"
  , lcodet "𝒥" "calJ" "\\mathcal{J}"
  , lcodet "𝒦" "calK" "\\mathcal{K}"
  , lcodet "ℒ" "calL" "\\mathcal{L}"
  , lcodet "ℳ" "calM" "\\mathcal{M}"
  , lcodet "𝒩" "calN" "\\mathcal{N}"
  , lcodet "𝒪" "calO" "\\mathcal{O}"
  , lcodet "𝒫" "calP" "\\mathcal{P}"
  , lcodet "𝒬" "calQ" "\\mathcal{Q}"
  , lcodet "ℛ" "calR" "\\mathcal{R}"
  , lcodet "𝒮" "calS" "\\mathcal{S}"
  , lcodet "𝒯" "calT" "\\mathcal{T}"
  , lcodet "𝒰" "calU" "\\mathcal{U}"
  , lcodet "𝒱" "calV" "\\mathcal{V}"
  , lcodet "𝒲" "calW" "\\mathcal{W}"
  , lcodet "𝒳" "calX" "\\mathcal{X}"
  , lcodet "𝒴" "calY" "\\mathcal{Y}"
  , lcodet "𝒵" "calZ" "\\mathcal{Z}"
  , lcodet "𝒶" "cala" "\\mathcal{a}"
  , lcodet "𝒷" "calb" "\\mathcal{b}"
  , lcodet "𝒸" "calc" "\\mathcal{c}"
  , lcodet "𝒹" "cald" "\\mathcal{d}"
  , lcodet "ℯ" "cale" "\\mathcal{e}"
  , lcodet "𝒻" "calf" "\\mathcal{f}"
  , lcodet "ℊ" "calg" "\\mathcal{g}"
  , lcodet "𝒽" "calh" "\\mathcal{h}"
  , lcodet "𝒾" "cali" "\\mathcal{i}"
  , lcodet "𝒿" "calj" "\\mathcal{j}"
  , lcodet "𝓀" "calk" "\\mathcal{k}"
  , lcodet "𝓁" "call" "\\mathcal{l}"
  , lcodet "𝓂" "calm" "\\mathcal{m}"
  , lcodet "𝓃" "caln" "\\mathcal{n}"
  , lcodet "ℴ" "calo" "\\mathcal{o}"
  , lcodet "𝓅" "calp" "\\mathcal{p}"
  , lcodet "𝓆" "calq" "\\mathcal{q}"
  , lcodet "𝓇" "calr" "\\mathcal{r}"
  , lcodet "𝓈" "cals" "\\mathcal{s}"
  , lcodet "𝓉" "calt" "\\mathcal{t}"
  , lcodet "𝓊" "calu" "\\mathcal{u}"
  , lcodet "𝓋" "calv" "\\mathcal{v}"
  , lcodet "𝓌" "calw" "\\mathcal{w}"
  , lcodet "𝓍" "calx" "\\mathcal{x}"
  , lcodet "𝓎" "caly" "\\mathcal{y}"
  , lcodet "𝓏" "calz" "\\mathcal{z}"

  -- Roman Bold Caligraphy
  , code "𝓐" "bdcalA"
  , code "𝓑" "bdcalB"
  , code "𝓒" "bdcalC"
  , code "𝓓" "bdcalD"
  , code "𝓔" "bdcalE"
  , code "𝓕" "bdcalF"
  , code "𝓖" "bdcalG"
  , code "𝓗" "bdcalH"
  , code "𝓘" "bdcalI"
  , code "𝓙" "bdcalJ"
  , code "𝓚" "bdcalK"
  , code "𝓛" "bdcalL"
  , code "𝓜" "bdcalM"
  , code "𝓝" "bdcalN"
  , code "𝓞" "bdcalO"
  , code "𝓟" "bdcalP"
  , code "𝓠" "bdcalQ"
  , code "𝓡" "bdcalR"
  , code "𝓢" "bdcalS"
  , code "𝓣" "bdcalT"
  , code "𝓤" "bdcalU"
  , code "𝓥" "bdcalV"
  , code "𝓦" "bdcalW"
  , code "𝓧" "bdcalX"
  , code "𝓨" "bdcalY"
  , code "𝓩" "bdcalZ"
  , code "𝓪" "bdcala"
  , code "𝓫" "bdcalb"
  , code "𝓬" "bdcalc"
  , code "𝓭" "bdcald"
  , code "𝓮" "bdcale"
  , code "𝓯" "bdcalf"
  , code "𝓰" "bdcalg"
  , code "𝓱" "bdcalh"
  , code "𝓲" "bdcali"
  , code "𝓳" "bdcalj"
  , code "𝓴" "bdcalk"
  , code "𝓵" "bdcall"
  , code "𝓶" "bdcalm"
  , code "𝓷" "bdcaln"
  , code "𝓸" "bdcalo"
  , code "𝓹" "bdcalp"
  , code "𝓺" "bdcalq"
  , code "𝓻" "bdcalr"
  , code "𝓼" "bdcals"
  , code "𝓽" "bdcalt"
  , code "𝓾" "bdcalu"
  , code "𝓿" "bdcalv"
  , code "𝔀" "bdcalw"
  , code "𝔁" "bdcalx"
  , code "𝔂" "bdcaly"
  , code "𝔃" "bdcalz"

  -- Roman Fraktur
  , lcode "𝔄" "frakA" "\\mathfrak{A}"
  , lcode "𝔅" "frakB" "\\mathfrak{B}"
  , lcode "ℭ" "frakC" "\\mathfrak{C}"
  , lcode "𝔇" "frakD" "\\mathfrak{D}"
  , lcode "𝔈" "frakE" "\\mathfrak{E}"
  , lcode "𝔉" "frakF" "\\mathfrak{F}"
  , lcode "𝔊" "frakG" "\\mathfrak{G}"
  , lcode "ℌ" "frakH" "\\mathfrak{H}"
  , lcode "ℑ" "frakI" "\\mathfrak{I}"
  , lcode "𝔍" "frakJ" "\\mathfrak{J}"
  , lcode "𝔎" "frakK" "\\mathfrak{K}"
  , lcode "𝔏" "frakL" "\\mathfrak{L}"
  , lcode "𝔐" "frakM" "\\mathfrak{M}"
  , lcode "𝔑" "frakN" "\\mathfrak{N}"
  , lcode "𝔒" "frakO" "\\mathfrak{O}"
  , lcode "𝔓" "frakP" "\\mathfrak{P}"
  , lcode "𝔔" "frakQ" "\\mathfrak{Q}"
  , lcode "ℜ" "frakR" "\\mathfrak{R}"
  , lcode "𝔖" "frakS" "\\mathfrak{S}"
  , lcode "𝔗" "frakT" "\\mathfrak{T}"
  , lcode "𝔘" "frakU" "\\mathfrak{U}"
  , lcode "𝔙" "frakV" "\\mathfrak{V}"
  , lcode "𝔚" "frakW" "\\mathfrak{W}"
  , lcode "𝔛" "frakX" "\\mathfrak{X}"
  , lcode "𝔜" "frakY" "\\mathfrak{Y}"
  , lcode "ℨ" "frakZ" "\\mathfrak{Z}"
  , lcode "𝔞" "fraka" "\\mathfrak{a}"
  , lcode "𝔟" "frakb" "\\mathfrak{b}"
  , lcode "𝔠" "frakc" "\\mathfrak{c}"
  , lcode "𝔡" "frakd" "\\mathfrak{d}"
  , lcode "𝔢" "frake" "\\mathfrak{e}"
  , lcode "𝔣" "frakf" "\\mathfrak{f}"
  , lcode "𝔤" "frakg" "\\mathfrak{g}"
  , lcode "𝔥" "frakh" "\\mathfrak{h}"
  , lcode "𝔦" "fraki" "\\mathfrak{i}"
  , lcode "𝔧" "frakj" "\\mathfrak{j}"
  , lcode "𝔨" "frakk" "\\mathfrak{k}"
  , lcode "𝔩" "frakl" "\\mathfrak{l}"
  , lcode "𝔪" "frakm" "\\mathfrak{m}"
  , lcode "𝔫" "frakn" "\\mathfrak{n}"
  , lcode "𝔬" "frako" "\\mathfrak{o}"
  , lcode "𝔭" "frakp" "\\mathfrak{p}"
  , lcode "𝔮" "frakq" "\\mathfrak{q}"
  , lcode "𝔯" "frakr" "\\mathfrak{r}"
  , lcode "𝔰" "fraks" "\\mathfrak{s}"
  , lcode "𝔱" "frakt" "\\mathfrak{t}"
  , lcode "𝔲" "fraku" "\\mathfrak{u}"
  , lcode "𝔳" "frakv" "\\mathfrak{v}"
  , lcode "𝔴" "frakw" "\\mathfrak{w}"
  , lcode "𝔵" "frakx" "\\mathfrak{x}"
  , lcode "𝔶" "fraky" "\\mathfrak{y}"
  , lcode "𝔷" "frakz" "\\mathfrak{z}"

  -- Roman Bold Fraktur
  , code "𝕬" "bdfrakA"
  , code "𝕭" "bdfrakB"
  , code "𝕮" "bdfrakC"
  , code "𝕯" "bdfrakD"
  , code "𝕰" "bdfrakE"
  , code "𝕱" "bdfrakF"
  , code "𝕲" "bdfrakG"
  , code "𝕳" "bdfrakH"
  , code "𝕴" "bdfrakI"
  , code "𝕵" "bdfrakJ"
  , code "𝕶" "bdfrakK"
  , code "𝕷" "bdfrakL"
  , code "𝕸" "bdfrakM"
  , code "𝕹" "bdfrakN"
  , code "𝕺" "bdfrakO"
  , code "𝕻" "bdfrakP"
  , code "𝕼" "bdfrakQ"
  , code "𝕽" "bdfrakR"
  , code "𝕾" "bdfrakS"
  , code "𝕿" "bdfrakT"
  , code "𝖀" "bdfrakU"
  , code "𝖁" "bdfrakV"
  , code "𝖂" "bdfrakW"
  , code "𝖃" "bdfrakX"
  , code "𝖄" "bdfrakY"
  , code "𝖅" "bdfrakZ"
  , code "𝖆" "bdfraka"
  , code "𝖇" "bdfrakb"
  , code "𝖈" "bdfrakc"
  , code "𝖉" "bdfrakd"
  , code "𝖊" "bdfrake"
  , code "𝖋" "bdfrakf"
  , code "𝖌" "bdfrakg"
  , code "𝖍" "bdfrakh"
  , code "𝖎" "bdfraki"
  , code "𝖏" "bdfrakj"
  , code "𝖐" "bdfrakk"
  , code "𝖑" "bdfrakl"
  , code "𝖒" "bdfrakm"
  , code "𝖓" "bdfrakn"
  , code "𝖔" "bdfrako"
  , code "𝖕" "bdfrakp"
  , code "𝖖" "bdfrakq"
  , code "𝖗" "bdfrakr"
  , code "𝖘" "bdfraks"
  , code "𝖙" "bdfrakt"
  , code "𝖚" "bdfraku"
  , code "𝖛" "bdfrakv"
  , code "𝖜" "bdfrakw"
  , code "𝖝" "bdfrakx"
  , code "𝖞" "bdfraky"
  , code "𝖟" "bdfrakz"

  -- Roman Blackboard Bold
  , lcodet "𝔸" "bbA" "\\mathbb{A}"
  , lcodet "𝔹" "bbB" "\\mathbb{B}"
  , lcodet "ℂ" "bbC" "\\mathbb{C}"
  , lcodet "𝔻" "bbD" "\\mathbb{D}"
  , lcodet "𝔼" "bbE" "\\mathbb{E}"
  , lcodet "𝔽" "bbF" "\\mathbb{F}"
  , lcodet "𝔾" "bbG" "\\mathbb{G}"
  , lcodet "ℍ" "bbH" "\\mathbb{H}"
  , lcodet "𝕀" "bbI" "\\mathbb{I}"
  , lcodet "𝕁" "bbJ" "\\mathbb{J}"
  , lcodet "𝕂" "bbK" "\\mathbb{K}"
  , lcodet "𝕃" "bbL" "\\mathbb{L}"
  , lcodet "𝕄" "bbM" "\\mathbb{M}"
  , lcodet "ℕ" "bbN" "\\mathbb{N}"
  , lcodet "𝕆" "bbO" "\\mathbb{O}"
  , lcodet "ℙ" "bbP" "\\mathbb{P}"
  , lcodet "ℚ" "bbQ" "\\mathbb{Q}"
  , lcodet "ℝ" "bbR" "\\mathbb{R}"
  , lcodet "𝕊" "bbS" "\\mathbb{S}"
  , lcodet "𝕋" "bbT" "\\mathbb{T}"
  , lcodet "𝕌" "bbU" "\\mathbb{U}"
  , lcodet "𝕍" "bbV" "\\mathbb{V}"
  , lcodet "𝕎" "bbW" "\\mathbb{W}"
  , lcodet "𝕏" "bbX" "\\mathbb{X}"
  , lcodet "𝕐" "bbY" "\\mathbb{Y}"
  , lcodet "ℤ" "bbZ" "\\mathbb{Z}"
  , lcodet "𝕒" "bba" "\\mathbb{a}"
  , lcodet "𝕓" "bbb" "\\mathbb{b}"
  , lcodet "𝕔" "bbc" "\\mathbb{c}"
  , lcodet "𝕕" "bbd" "\\mathbb{d}"
  , lcodet "𝕖" "bbe" "\\mathbb{e}"
  , lcodet "𝕗" "bbf" "\\mathbb{f}"
  , lcodet "𝕘" "bbg" "\\mathbb{g}"
  , lcodet "𝕙" "bbh" "\\mathbb{h}"
  , lcodet "𝕚" "bbi" "\\mathbb{i}"
  , lcodet "𝕛" "bbj" "\\mathbb{j}"
  , lcodet "𝕜" "bbk" "\\mathbb{k}"
  , lcodet "𝕝" "bbl" "\\mathbb{l}"
  , lcodet "𝕞" "bbm" "\\mathbb{m}"
  , lcodet "𝕟" "bbn" "\\mathbb{n}"
  , lcodet "𝕠" "bbo" "\\mathbb{o}"
  , lcodet "𝕡" "bbp" "\\mathbb{p}"
  , lcodet "𝕢" "bbq" "\\mathbb{q}"
  , lcodet "𝕣" "bbr" "\\mathbb{r}"
  , lcodet "𝕤" "bbs" "\\mathbb{s}"
  , lcodet "𝕥" "bbt" "\\mathbb{t}"
  , lcodet "𝕦" "bbu" "\\mathbb{u}"
  , lcodet "𝕧" "bbv" "\\mathbb{v}"
  , lcodet "𝕨" "bbw" "\\mathbb{w}"
  , lcodet "𝕩" "bbx" "\\mathbb{x}"
  , lcodet "𝕪" "bby" "\\mathbb{y}"
  , lcodet "𝕫" "bbz" "\\mathbb{z}"

  -- Roman Subscripts
  , lcodet "ₐ" "_a" "_a"
  , lcodet "ₑ" "_e" "_e"
  , lcodet "ₕ" "_h" "_h"
  , lcodet "ᵢ" "_i" "_i"
  , lcodet "ⱼ" "_j" "_j"
  , lcodet "ₖ" "_k" "_k"
  , lcodet "ₗ" "_l" "_l"
  , lcodet "ₘ" "_m" "_m"
  , lcodet "ₙ" "_n" "_n"
  , lcodet "ₒ" "_o" "_o"
  , lcodet "ₚ" "_p" "_p"
  , lcodet "ᵣ" "_r" "_r"
  , lcodet "ₛ" "_s" "_s"
  , lcodet "ₜ" "_t" "_t"
  , lcodet "ᵤ" "_u" "_u"
  , lcodet "ᵥ" "_v" "_v"
  , lcodet "ₓ" "_x" "_x"

  -- Roman Superscripts
  , lcodet "ᴬ" "^A" "^A"
  , lcodet "ᴮ" "^B" "^B"
  , lcodet "ᴰ" "^D" "^D"
  , lcodet "ᴱ" "^E" "^E"
  , lcodet "ᴳ" "^G" "^G"
  , lcodet "ᴴ" "^H" "^H"
  , lcodet "ᴵ" "^I" "^I"
  , lcodet "ᴶ" "^J" "^J"
  , lcodet "ᴷ" "^K" "^K"
  , lcodet "ᴸ" "^L" "^L"
  , lcodet "ᴹ" "^M" "^M"
  , lcodet "ᴺ" "^N" "^N"
  , lcodet "ᴼ" "^O" "^O"
  , lcodet "ᴾ" "^P" "^P"
  , lcodet "ᴿ" "^R" "^R"
  , lcodet "ᵀ" "^T" "^T"
  , lcodet "ᵁ" "^U" "^U"
  , lcodet "ⱽ" "^V" "^V"
  , lcodet "ᵂ" "^W" "^W"
  , lcodet "ᵃ" "^a" "^a"
  , lcodet "ᵇ" "^b" "^b"
  , lcodet "ᶜ" "^c" "^c"
  , lcodet "ᵈ" "^d" "^d"
  , lcodet "ᵉ" "^e" "^e"
  , lcodet "ᶠ" "^f" "^f"
  , lcodet "ᵍ" "^g" "^g"
  , lcodet "ʰ" "^h" "^h"
  , lcodet "ⁱ" "^i" "^i"
  , lcodet "ʲ" "^j" "^j"
  , lcodet "ᵏ" "^k" "^k"
  , lcodet "ˡ" "^l" "^l"
  , lcodet "ᵐ" "^m" "^m"
  , lcodet "ⁿ" "^n" "^n"
  , lcodet "ᵒ" "^o" "^o"
  , lcodet "ᵖ" "^p" "^p"
  , lcodet "ᶝ" "^q" "^q"
  , lcodet "ʳ" "^r" "^r"
  , lcodet "ˢ" "^s" "^s"
  , lcodet "ᵗ" "^t" "^t"
  , lcodet "ᵘ" "^u" "^u"
  , lcodet "ᵛ" "^v" "^v"
  , lcodet "ʷ" "^w" "^w"
  , lcodet "ˣ" "^x" "^x"
  , lcodet "ʸ" "^y" "^y"
  , lcodet "ᶻ" "^z" "^z"

  , lcodet "™" "^tm" "\\texttrademark"

  -- Roman Small Upper Case
  , lcodet "ᴀ" "sca" "\\textsc{a}"
  , lcodet "ʙ" "scb" "\\textsc{b}"
  , lcodet "ᴄ" "scc" "\\textsc{c}"
  , lcodet "ᴅ" "scd" "\\textsc{d}"
  , lcodet "ᴇ" "sce" "\\textsc{e}"
  , lcodet "ꜰ" "scf" "\\textsc{f}"
  , lcodet "ɢ" "scg" "\\textsc{g}"
  , lcodet "ʜ" "sch" "\\textsc{h}"
  , lcodet "ɪ" "sci" "\\textsc{i}"
  , lcodet "ᴊ" "scj" "\\textsc{j}"
  , lcodet "ᴋ" "sck" "\\textsc{k}"
  , lcodet "ʟ" "scl" "\\textsc{l}"
  , lcodet "ᴍ" "scm" "\\textsc{m}"
  , lcodet "ɴ" "scn" "\\textsc{n}"
  , lcodet "ᴏ" "sco" "\\textsc{o}"
  , lcodet "ᴘ" "scp" "\\textsc{p}"
  , lcodet "ʀ" "scr" "\\textsc{r}"
  , lcodet "ꜱ" "scs" "\\textsc{s}"
  , lcodet "ᴛ" "sct" "\\textsc{t}"
  , lcodet "ᴜ" "scu" "\\textsc{u}"
  , lcodet "ᴠ" "scv" "\\textsc{v}"
  , lcodet "ᴡ" "scw" "\\textsc{w}"
  , lcodet "ʏ" "scy" "\\textsc{y}"
  , lcodet "ᴢ" "scz" "\\textsc{z}"

  -- Roman Accents and Gylphs
  , lcodet "À" "A`"  "\\`A"
  , lcodet "Á" "A'"  "\\'A"
  , lcodet "È" "E`"  "\\`E"
  , lcodet "É" "E'"  "\\'E"
  , lcodet "à" "a`"  "\\`a"
  , lcodet "á" "a'"  "\\'a"
  , lcodet "è" "e`"  "\\`e"
  , lcodet "é" "e'"  "\\'e"
  , lcodet "ö" "o.." "\\\"o"
  , lcodet "ä" "a.." "\\\"a"
  , lcodet "ü" "u.." "\\\"u"
  , lcodet "æ" "ae"  "\\ae"
  , lcodet "œ" "oe"  "\\oe"
  , lcodet "ễ" "e^~" "\\begingroup{}\\fontencoding{T5}\\selectfont \\~\\ecircumflex\\endgroup{}"
  , lcodet "ú" "u'" "\\'u"
  , lcodet "ï" "i.." "\\\"i"
  , code "ø" "osl"
  ]
